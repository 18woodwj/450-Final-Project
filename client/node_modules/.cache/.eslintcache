[{"C:\\Users\\vtrem\\OneDrive\\Documents\\GitHub\\450-Final-Project\\client\\src\\index.js":"1","C:\\Users\\vtrem\\OneDrive\\Documents\\GitHub\\450-Final-Project\\client\\src\\pages\\SavedPage.js":"2","C:\\Users\\vtrem\\OneDrive\\Documents\\GitHub\\450-Final-Project\\client\\src\\pages\\BlendPage.js":"3","C:\\Users\\vtrem\\OneDrive\\Documents\\GitHub\\450-Final-Project\\client\\src\\pages\\SongsPage.js":"4","C:\\Users\\vtrem\\OneDrive\\Documents\\GitHub\\450-Final-Project\\client\\src\\pages\\ChartsPage.js":"5","C:\\Users\\vtrem\\OneDrive\\Documents\\GitHub\\450-Final-Project\\client\\src\\pages\\RegisterPage.js":"6","C:\\Users\\vtrem\\OneDrive\\Documents\\GitHub\\450-Final-Project\\client\\src\\pages\\LoginPage.js":"7","C:\\Users\\vtrem\\OneDrive\\Documents\\GitHub\\450-Final-Project\\client\\src\\fetcher.js":"8","C:\\Users\\vtrem\\OneDrive\\Documents\\GitHub\\450-Final-Project\\client\\src\\components\\MenuBar.js":"9","C:\\Users\\vtrem\\OneDrive\\Documents\\GitHub\\450-Final-Project\\client\\src\\pages\\utilities\\Forms.js":"10"},{"size":1462,"mtime":1671034779167,"results":"11","hashOfConfig":"12"},{"size":3993,"mtime":1670963959148,"results":"13","hashOfConfig":"12"},{"size":3993,"mtime":1670963959147,"results":"14","hashOfConfig":"12"},{"size":3993,"mtime":1670963959148,"results":"15","hashOfConfig":"12"},{"size":3995,"mtime":1670963959147,"results":"16","hashOfConfig":"12"},{"size":7948,"mtime":1671038666513,"results":"17","hashOfConfig":"12"},{"size":6283,"mtime":1671032440275,"results":"18","hashOfConfig":"12"},{"size":1811,"mtime":1670963959144,"results":"19","hashOfConfig":"12"},{"size":963,"mtime":1670963959144,"results":"20","hashOfConfig":"12"},{"size":2661,"mtime":1671029381459,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"u9pty2",{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"24"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\vtrem\\OneDrive\\Documents\\GitHub\\450-Final-Project\\client\\src\\index.js",[],["48","49"],"C:\\Users\\vtrem\\OneDrive\\Documents\\GitHub\\450-Final-Project\\client\\src\\pages\\SavedPage.js",["50"],"import React from 'react';\r\nimport {\r\n  Table,\r\n  Pagination,\r\n  Select\r\n} from 'antd'\r\n\r\nimport MenuBar from '../components/MenuBar';\r\nimport { getAllMatches, getAllPlayers } from '../fetcher'\r\nconst { Column, ColumnGroup } = Table;\r\nconst { Option } = Select;\r\n\r\n\r\nconst playerColumns = [\r\n  {\r\n    title: 'Name',\r\n    dataIndex: 'Name',\r\n    key: 'Name',\r\n    sorter: (a, b) => a.Name.localeCompare(b.Name),\r\n    render: (text, row) => <a href={`/players?id=${row.PlayerId}`}>{text}</a>\r\n  },\r\n  {\r\n    title: 'Nationality',\r\n    dataIndex: 'Nationality',\r\n    key: 'Nationality',\r\n    sorter: (a, b) => a.Nationality.localeCompare(b.Nationality)\r\n  },\r\n  {\r\n    title: 'Rating',\r\n    dataIndex: 'Rating',\r\n    key: 'Rating',\r\n    sorter: (a, b) => a.Rating - b.Rating\r\n    \r\n  },\r\n  // TASK 7: add a column for Potential, with the ability to (numerically) sort ,\r\n  // TASK 8: add a column for Club, with the ability to (alphabetically) sort \r\n  // TASK 9: add a column for Value - no sorting required\r\n];\r\n\r\nclass SavedPage extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      matchesResults: [],\r\n      matchesPageNumber: 1,\r\n      matchesPageSize: 10,\r\n      playersResults: [],\r\n      pagination: null  \r\n    }\r\n\r\n    this.leagueOnChange = this.leagueOnChange.bind(this)\r\n    this.goToMatch = this.goToMatch.bind(this)\r\n  }\r\n\r\n\r\n  goToMatch(matchId) {\r\n    window.location = `/matches?id=${matchId}`\r\n  }\r\n\r\n  leagueOnChange(value) {\r\n    // TASK 2: this value should be used as a parameter to call getAllMatches in fetcher.js with the parameters page and pageSize set to null\r\n    // then, matchesResults in state should be set to the results returned - see a similar function call in componentDidMount()\r\n    \r\n  }\r\n\r\n  componentDidMount() {\r\n    getAllMatches(null, null, 'D1').then(res => {\r\n      this.setState({ matchesResults: res.results })\r\n    })\r\n\r\n    getAllPlayers().then(res => {\r\n      console.log(res.results)\r\n      // TASK 1: set the correct state attribute to res.results\r\n    })\r\n\r\n \r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <MenuBar />\r\n        <div style={{ width: '70vw', margin: '0 auto', marginTop: '5vh' }}>\r\n          <h3>Players</h3>\r\n          <Table dataSource={this.state.playersResults} columns={playerColumns} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}/>\r\n        </div>\r\n        <div style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }}>\r\n          <h3>Matches</h3>\r\n          <Select defaultValue=\"D1\" style={{ width: 120 }} onChange={this.leagueOnChange}>\r\n            <Option value=\"D1\">Bundesliga</Option>\r\n             {/* TASK 3: Take a look at Dataset Information.md from MS1 and add other options to the selector here  */}\r\n\r\n          </Select>\r\n          \r\n          <Table onRow={(record, rowIndex) => {\r\n    return {\r\n      onClick: event => {this.goToMatch(record.MatchId)}, // clicking a row takes the user to a detailed view of the match in the /matches page using the MatchId parameter  \r\n    };\r\n  }} dataSource={this.state.matchesResults} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}>\r\n            <ColumnGroup title=\"Teams\">\r\n              {/* TASK 4: correct the title for the 'Home' column and add a similar column for 'Away' team in this ColumnGroup */}\r\n              <Column title=\"H\" dataIndex=\"Home\" key=\"Home\" sorter= {(a, b) => a.Home.localeCompare(b.Home)}/>\r\n            </ColumnGroup>\r\n            <ColumnGroup title=\"Goals\">\r\n              {/* TASK 5: add columns for home and away goals in this ColumnGroup, with the ability to sort values in these columns numerically */}\r\n             \r\n            </ColumnGroup>\r\n             {/* TASK 6: create two columns (independent - not in a column group) for the date and time. Do not add a sorting functionality */}\r\n          </Table>\r\n\r\n        </div>\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default SavedPage\r\n\r\n","C:\\Users\\vtrem\\OneDrive\\Documents\\GitHub\\450-Final-Project\\client\\src\\pages\\BlendPage.js",["51"],"import React from 'react';\r\nimport {\r\n  Table,\r\n  Pagination,\r\n  Select\r\n} from 'antd'\r\n\r\nimport MenuBar from '../components/MenuBar';\r\nimport { getAllMatches, getAllPlayers } from '../fetcher'\r\nconst { Column, ColumnGroup } = Table;\r\nconst { Option } = Select;\r\n\r\n\r\nconst playerColumns = [\r\n  {\r\n    title: 'Name',\r\n    dataIndex: 'Name',\r\n    key: 'Name',\r\n    sorter: (a, b) => a.Name.localeCompare(b.Name),\r\n    render: (text, row) => <a href={`/players?id=${row.PlayerId}`}>{text}</a>\r\n  },\r\n  {\r\n    title: 'Nationality',\r\n    dataIndex: 'Nationality',\r\n    key: 'Nationality',\r\n    sorter: (a, b) => a.Nationality.localeCompare(b.Nationality)\r\n  },\r\n  {\r\n    title: 'Rating',\r\n    dataIndex: 'Rating',\r\n    key: 'Rating',\r\n    sorter: (a, b) => a.Rating - b.Rating\r\n    \r\n  },\r\n  // TASK 7: add a column for Potential, with the ability to (numerically) sort ,\r\n  // TASK 8: add a column for Club, with the ability to (alphabetically) sort \r\n  // TASK 9: add a column for Value - no sorting required\r\n];\r\n\r\nclass BlendPage extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      matchesResults: [],\r\n      matchesPageNumber: 1,\r\n      matchesPageSize: 10,\r\n      playersResults: [],\r\n      pagination: null  \r\n    }\r\n\r\n    this.leagueOnChange = this.leagueOnChange.bind(this)\r\n    this.goToMatch = this.goToMatch.bind(this)\r\n  }\r\n\r\n\r\n  goToMatch(matchId) {\r\n    window.location = `/matches?id=${matchId}`\r\n  }\r\n\r\n  leagueOnChange(value) {\r\n    // TASK 2: this value should be used as a parameter to call getAllMatches in fetcher.js with the parameters page and pageSize set to null\r\n    // then, matchesResults in state should be set to the results returned - see a similar function call in componentDidMount()\r\n    \r\n  }\r\n\r\n  componentDidMount() {\r\n    getAllMatches(null, null, 'D1').then(res => {\r\n      this.setState({ matchesResults: res.results })\r\n    })\r\n\r\n    getAllPlayers().then(res => {\r\n      console.log(res.results)\r\n      // TASK 1: set the correct state attribute to res.results\r\n    })\r\n\r\n \r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <MenuBar />\r\n        <div style={{ width: '70vw', margin: '0 auto', marginTop: '5vh' }}>\r\n          <h3>Players</h3>\r\n          <Table dataSource={this.state.playersResults} columns={playerColumns} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}/>\r\n        </div>\r\n        <div style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }}>\r\n          <h3>Matches</h3>\r\n          <Select defaultValue=\"D1\" style={{ width: 120 }} onChange={this.leagueOnChange}>\r\n            <Option value=\"D1\">Bundesliga</Option>\r\n             {/* TASK 3: Take a look at Dataset Information.md from MS1 and add other options to the selector here  */}\r\n\r\n          </Select>\r\n          \r\n          <Table onRow={(record, rowIndex) => {\r\n    return {\r\n      onClick: event => {this.goToMatch(record.MatchId)}, // clicking a row takes the user to a detailed view of the match in the /matches page using the MatchId parameter  \r\n    };\r\n  }} dataSource={this.state.matchesResults} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}>\r\n            <ColumnGroup title=\"Teams\">\r\n              {/* TASK 4: correct the title for the 'Home' column and add a similar column for 'Away' team in this ColumnGroup */}\r\n              <Column title=\"H\" dataIndex=\"Home\" key=\"Home\" sorter= {(a, b) => a.Home.localeCompare(b.Home)}/>\r\n            </ColumnGroup>\r\n            <ColumnGroup title=\"Goals\">\r\n              {/* TASK 5: add columns for home and away goals in this ColumnGroup, with the ability to sort values in these columns numerically */}\r\n             \r\n            </ColumnGroup>\r\n             {/* TASK 6: create two columns (independent - not in a column group) for the date and time. Do not add a sorting functionality */}\r\n          </Table>\r\n\r\n        </div>\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default BlendPage\r\n\r\n","C:\\Users\\vtrem\\OneDrive\\Documents\\GitHub\\450-Final-Project\\client\\src\\pages\\SongsPage.js",["52"],"import React from 'react';\r\nimport {\r\n  Table,\r\n  Pagination,\r\n  Select\r\n} from 'antd'\r\n\r\nimport MenuBar from '../components/MenuBar';\r\nimport { getAllMatches, getAllPlayers } from '../fetcher'\r\nconst { Column, ColumnGroup } = Table;\r\nconst { Option } = Select;\r\n\r\n\r\nconst playerColumns = [\r\n  {\r\n    title: 'Name',\r\n    dataIndex: 'Name',\r\n    key: 'Name',\r\n    sorter: (a, b) => a.Name.localeCompare(b.Name),\r\n    render: (text, row) => <a href={`/players?id=${row.PlayerId}`}>{text}</a>\r\n  },\r\n  {\r\n    title: 'Nationality',\r\n    dataIndex: 'Nationality',\r\n    key: 'Nationality',\r\n    sorter: (a, b) => a.Nationality.localeCompare(b.Nationality)\r\n  },\r\n  {\r\n    title: 'Rating',\r\n    dataIndex: 'Rating',\r\n    key: 'Rating',\r\n    sorter: (a, b) => a.Rating - b.Rating\r\n    \r\n  },\r\n  // TASK 7: add a column for Potential, with the ability to (numerically) sort ,\r\n  // TASK 8: add a column for Club, with the ability to (alphabetically) sort \r\n  // TASK 9: add a column for Value - no sorting required\r\n];\r\n\r\nclass SongsPage extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      matchesResults: [],\r\n      matchesPageNumber: 1,\r\n      matchesPageSize: 10,\r\n      playersResults: [],\r\n      pagination: null  \r\n    }\r\n\r\n    this.leagueOnChange = this.leagueOnChange.bind(this)\r\n    this.goToMatch = this.goToMatch.bind(this)\r\n  }\r\n\r\n\r\n  goToMatch(matchId) {\r\n    window.location = `/matches?id=${matchId}`\r\n  }\r\n\r\n  leagueOnChange(value) {\r\n    // TASK 2: this value should be used as a parameter to call getAllMatches in fetcher.js with the parameters page and pageSize set to null\r\n    // then, matchesResults in state should be set to the results returned - see a similar function call in componentDidMount()\r\n    \r\n  }\r\n\r\n  componentDidMount() {\r\n    getAllMatches(null, null, 'D1').then(res => {\r\n      this.setState({ matchesResults: res.results })\r\n    })\r\n\r\n    getAllPlayers().then(res => {\r\n      console.log(res.results)\r\n      // TASK 1: set the correct state attribute to res.results\r\n    })\r\n\r\n \r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <MenuBar />\r\n        <div style={{ width: '70vw', margin: '0 auto', marginTop: '5vh' }}>\r\n          <h3>Players</h3>\r\n          <Table dataSource={this.state.playersResults} columns={playerColumns} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}/>\r\n        </div>\r\n        <div style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }}>\r\n          <h3>Matches</h3>\r\n          <Select defaultValue=\"D1\" style={{ width: 120 }} onChange={this.leagueOnChange}>\r\n            <Option value=\"D1\">Bundesliga</Option>\r\n             {/* TASK 3: Take a look at Dataset Information.md from MS1 and add other options to the selector here  */}\r\n\r\n          </Select>\r\n          \r\n          <Table onRow={(record, rowIndex) => {\r\n    return {\r\n      onClick: event => {this.goToMatch(record.MatchId)}, // clicking a row takes the user to a detailed view of the match in the /matches page using the MatchId parameter  \r\n    };\r\n  }} dataSource={this.state.matchesResults} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}>\r\n            <ColumnGroup title=\"Teams\">\r\n              {/* TASK 4: correct the title for the 'Home' column and add a similar column for 'Away' team in this ColumnGroup */}\r\n              <Column title=\"H\" dataIndex=\"Home\" key=\"Home\" sorter= {(a, b) => a.Home.localeCompare(b.Home)}/>\r\n            </ColumnGroup>\r\n            <ColumnGroup title=\"Goals\">\r\n              {/* TASK 5: add columns for home and away goals in this ColumnGroup, with the ability to sort values in these columns numerically */}\r\n             \r\n            </ColumnGroup>\r\n             {/* TASK 6: create two columns (independent - not in a column group) for the date and time. Do not add a sorting functionality */}\r\n          </Table>\r\n\r\n        </div>\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default SongsPage\r\n\r\n","C:\\Users\\vtrem\\OneDrive\\Documents\\GitHub\\450-Final-Project\\client\\src\\pages\\ChartsPage.js",["53"],"import React from 'react';\r\nimport {\r\n  Table,\r\n  Pagination,\r\n  Select\r\n} from 'antd'\r\n\r\nimport MenuBar from '../components/MenuBar';\r\nimport { getAllMatches, getAllPlayers } from '../fetcher'\r\nconst { Column, ColumnGroup } = Table;\r\nconst { Option } = Select;\r\n\r\n\r\nconst playerColumns = [\r\n  {\r\n    title: 'Name',\r\n    dataIndex: 'Name',\r\n    key: 'Name',\r\n    sorter: (a, b) => a.Name.localeCompare(b.Name),\r\n    render: (text, row) => <a href={`/players?id=${row.PlayerId}`}>{text}</a>\r\n  },\r\n  {\r\n    title: 'Nationality',\r\n    dataIndex: 'Nationality',\r\n    key: 'Nationality',\r\n    sorter: (a, b) => a.Nationality.localeCompare(b.Nationality)\r\n  },\r\n  {\r\n    title: 'Rating',\r\n    dataIndex: 'Rating',\r\n    key: 'Rating',\r\n    sorter: (a, b) => a.Rating - b.Rating\r\n    \r\n  },\r\n  // TASK 7: add a column for Potential, with the ability to (numerically) sort ,\r\n  // TASK 8: add a column for Club, with the ability to (alphabetically) sort \r\n  // TASK 9: add a column for Value - no sorting required\r\n];\r\n\r\nclass ChartsPage extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      matchesResults: [],\r\n      matchesPageNumber: 1,\r\n      matchesPageSize: 10,\r\n      playersResults: [],\r\n      pagination: null  \r\n    }\r\n\r\n    this.leagueOnChange = this.leagueOnChange.bind(this)\r\n    this.goToMatch = this.goToMatch.bind(this)\r\n  }\r\n\r\n\r\n  goToMatch(matchId) {\r\n    window.location = `/matches?id=${matchId}`\r\n  }\r\n\r\n  leagueOnChange(value) {\r\n    // TASK 2: this value should be used as a parameter to call getAllMatches in fetcher.js with the parameters page and pageSize set to null\r\n    // then, matchesResults in state should be set to the results returned - see a similar function call in componentDidMount()\r\n    \r\n  }\r\n\r\n  componentDidMount() {\r\n    getAllMatches(null, null, 'D1').then(res => {\r\n      this.setState({ matchesResults: res.results })\r\n    })\r\n\r\n    getAllPlayers().then(res => {\r\n      console.log(res.results)\r\n      // TASK 1: set the correct state attribute to res.results\r\n    })\r\n\r\n \r\n  }\r\n\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div>\r\n        <MenuBar />\r\n        <div style={{ width: '70vw', margin: '0 auto', marginTop: '5vh' }}>\r\n          <h3>Players</h3>\r\n          <Table dataSource={this.state.playersResults} columns={playerColumns} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}/>\r\n        </div>\r\n        <div style={{ width: '70vw', margin: '0 auto', marginTop: '2vh' }}>\r\n          <h3>Matches</h3>\r\n          <Select defaultValue=\"D1\" style={{ width: 120 }} onChange={this.leagueOnChange}>\r\n            <Option value=\"D1\">Bundesliga</Option>\r\n             {/* TASK 3: Take a look at Dataset Information.md from MS1 and add other options to the selector here  */}\r\n\r\n          </Select>\r\n          \r\n          <Table onRow={(record, rowIndex) => {\r\n    return {\r\n      onClick: event => {this.goToMatch(record.MatchId)}, // clicking a row takes the user to a detailed view of the match in the /matches page using the MatchId parameter  \r\n    };\r\n  }} dataSource={this.state.matchesResults} pagination={{ pageSizeOptions:[5, 10], defaultPageSize: 5, showQuickJumper:true }}>\r\n            <ColumnGroup title=\"Teams\">\r\n              {/* TASK 4: correct the title for the 'Home' column and add a similar column for 'Away' team in this ColumnGroup */}\r\n              <Column title=\"H\" dataIndex=\"Home\" key=\"Home\" sorter= {(a, b) => a.Home.localeCompare(b.Home)}/>\r\n            </ColumnGroup>\r\n            <ColumnGroup title=\"Goals\">\r\n              {/* TASK 5: add columns for home and away goals in this ColumnGroup, with the ability to sort values in these columns numerically */}\r\n             \r\n            </ColumnGroup>\r\n             {/* TASK 6: create two columns (independent - not in a column group) for the date and time. Do not add a sorting functionality */}\r\n          </Table>\r\n\r\n        </div>\r\n\r\n\r\n      </div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default ChartsPage\r\n\r\n","C:\\Users\\vtrem\\OneDrive\\Documents\\GitHub\\450-Final-Project\\client\\src\\pages\\RegisterPage.js",["54"],"C:\\Users\\vtrem\\OneDrive\\Documents\\GitHub\\450-Final-Project\\client\\src\\pages\\LoginPage.js",["55"],"import { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Form from \"./utilities/Forms\";\r\n\r\nconst Login = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [remember, setRemember] = useState(false);\r\n  const [validate, setValidate] = useState({});\r\n  const [showPassword, setShowPassword] = useState(false);\r\n\r\n  const validateLogin = () => {\r\n    let isValid = true;\r\n\r\n    let validator = Form.validator({\r\n      email: {\r\n        value: email,\r\n        isRequired: true,\r\n        isEmail: true,\r\n      },\r\n      password: {\r\n        value: password,\r\n        isRequired: true,\r\n        minLength: 6,\r\n      },\r\n    });\r\n\r\n    if (validator !== null) {\r\n      setValidate({\r\n        validate: validator.errors,\r\n      });\r\n\r\n      isValid = false;\r\n    }\r\n    return isValid;\r\n  };\r\n\r\n  const authenticate = (e) => {\r\n    e.preventDefault();\r\n\r\n    const validate = validateLogin();\r\n\r\n    if (validate) {\r\n      setValidate({});\r\n      setEmail(\"\");\r\n      setPassword(\"\");\r\n      alert(\"Successfully Login\");\r\n    }\r\n  };\r\n\r\n  const togglePassword = (e) => {\r\n    if (showPassword) {\r\n      setShowPassword(false);\r\n    } else {\r\n      setShowPassword(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"row g-0 auth-wrapper\">\r\n      <div className=\"col-12 col-md-5 col-lg-6 h-100 auth-background-col\">\r\n        <div className=\"auth-background-holder\"></div>\r\n        <div className=\"auth-background-mask\"></div>\r\n      </div>\r\n\r\n      <div className=\"col-12 col-md-7 col-lg-6 auth-main-col text-center\">\r\n        <div className=\"d-flex flex-column align-content-end\">\r\n          <div className=\"auth-body mx-auto\">\r\n            <p>Login to your account</p>\r\n            <div className=\"auth-form-container text-start\">\r\n              <form\r\n                className=\"auth-form\"\r\n                method=\"POST\"\r\n                onSubmit={authenticate}\r\n                autoComplete={\"off\"}\r\n              >\r\n                <div className=\"email mb-3\">\r\n                  <input\r\n                    type=\"email\"\r\n                    className={`form-control ${\r\n                      validate.validate && validate.validate.email\r\n                        ? \"is-invalid \"\r\n                        : \"\"\r\n                    }`}\r\n                    id=\"email\"\r\n                    name=\"email\"\r\n                    value={email}\r\n                    placeholder=\"Id\"\r\n                    onChange={(e) => setEmail(e.target.value)}\r\n                  />\r\n\r\n                  <div\r\n                    className={`invalid-feedback text-start ${\r\n                      validate.validate && validate.validate.email\r\n                        ? \"d-block\"\r\n                        : \"d-none\"\r\n                    }`}\r\n                  >\r\n                    {validate.validate && validate.validate.email\r\n                      ? validate.validate.email[0]\r\n                      : \"\"}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"password mb-3\">\r\n                  {/* <div className=\"input-group\">\r\n                    <input\r\n                      type={showPassword ? \"text\" : \"password\"}\r\n                      className={`form-control ${\r\n                        validate.validate && validate.validate.password\r\n                          ? \"is-invalid \"\r\n                          : \"\"\r\n                      }`}\r\n                      name=\"password\"\r\n                      id=\"password\"\r\n                      value={password}\r\n                      placeholder=\"Password\"\r\n                      onChange={(e) => setPassword(e.target.value)}\r\n                    />\r\n\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"btn btn-outline-primary btn-sm\"\r\n                      onClick={(e) => togglePassword(e)}\r\n                    >\r\n                      <i\r\n                        className={\r\n                          showPassword ? \"far fa-eye\" : \"far fa-eye-slash\"\r\n                        }\r\n                      ></i>{\" \"}\r\n                    </button>\r\n\r\n                    <div\r\n                      className={`invalid-feedback text-start ${\r\n                        validate.validate && validate.validate.password\r\n                          ? \"d-block\"\r\n                          : \"d-none\"\r\n                      }`}\r\n                    >\r\n                      {validate.validate && validate.validate.password\r\n                        ? validate.validate.password[0]\r\n                        : \"\"}\r\n                    </div>\r\n                  </div> */}\r\n\r\n                  <div className=\"extra mt-3 row justify-content-between\">\r\n                      <div className=\"form-check\">\r\n                        <input\r\n                          className=\"form-check-input\"\r\n                          type=\"checkbox\"\r\n                          id=\"remember\"\r\n                          checked={remember}\r\n                          onChange={(e) => setRemember(e.currentTarget.checked)}\r\n                        />\r\n                        <label  className=\"form-check-label\" htmlFor=\"remember\">\r\n                          Remember me\r\n                        </label>\r\n                      </div>\r\n                    </div>\r\n                    {/*<div className=\"col-6\">\r\n                      <div className=\"forgot-password text-end\">\r\n                        <Link to=\"/forgot-password\">Forgot password?</Link>\r\n                      </div>\r\n                      </div>*/}\r\n                </div>\r\n                <div className=\"text-center\">\r\n                  <button\r\n                    type=\"submit\"\r\n                    className=\"btn btn-primary w-100 theme-btn mx-auto\"\r\n                  >\r\n                    Log In\r\n                  </button>\r\n                </div>\r\n              </form>\r\n\r\n              <hr />\r\n              <div className=\"auth-option text-center pt-2\">\r\n                No Account?{\" \"}\r\n                <Link className=\"text-link\" to=\"/register\">\r\n                Register{\" \"}\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;","C:\\Users\\vtrem\\OneDrive\\Documents\\GitHub\\450-Final-Project\\client\\src\\fetcher.js",[],"C:\\Users\\vtrem\\OneDrive\\Documents\\GitHub\\450-Final-Project\\client\\src\\components\\MenuBar.js",[],"C:\\Users\\vtrem\\OneDrive\\Documents\\GitHub\\450-Final-Project\\client\\src\\pages\\utilities\\Forms.js",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":4,"column":3,"nodeType":"62","messageId":"63","endLine":4,"endColumn":13},{"ruleId":"60","severity":1,"message":"61","line":4,"column":3,"nodeType":"62","messageId":"63","endLine":4,"endColumn":13},{"ruleId":"60","severity":1,"message":"61","line":4,"column":3,"nodeType":"62","messageId":"63","endLine":4,"endColumn":13},{"ruleId":"60","severity":1,"message":"61","line":4,"column":3,"nodeType":"62","messageId":"63","endLine":4,"endColumn":13},{"ruleId":"60","severity":1,"message":"64","line":128,"column":9,"nodeType":"62","messageId":"63","endLine":128,"endColumn":23},{"ruleId":"60","severity":1,"message":"64","line":51,"column":9,"nodeType":"62","messageId":"63","endLine":51,"endColumn":23},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'Pagination' is defined but never used.","Identifier","unusedVar","'togglePassword' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]